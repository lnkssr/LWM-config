#!/bin/bash

# Папка с обоями
WALLPAPER_DIR="/home/f1la/Pictures/lw"

# Проверка папки с обоями
if [ ! -d "$WALLPAPER_DIR" ]; then
  echo "Error: Папка с обоями ($WALLPAPER_DIR) не найдена!"
  exit 1
fi

# Выбор случайного файла из папки
RANDOM_WALLPAPER=$(find "$WALLPAPER_DIR" -type f \( -iname "*.jpg" -o -iname "*.png" -o -iname "*.jpeg" \) | shuf -n 1)

# Проверка, есть ли обои
if [ -z "$RANDOM_WALLPAPER" ]; then
  echo "Error: Нет доступных обоев в папке $WALLPAPER_DIR"
  echo "Содержимое папки: $(ls $WALLPAPER_DIR)"
  exit 1
fi

# Установить обои
nitrogen --set-zoom-fill "$RANDOM_WALLPAPER"
echo "Установлены обои: $RANDOM_WALLPAPER"

# Генерация цветов
echo "Генерация цветовой схемы..."
hellwal -i "$RANDOM_WALLPAPER"

# Получение цветов
COLORS_FILE="$HOME/.cache/hellwal/colors.json"
if [ ! -f "$COLORS_FILE" ]; then
  echo "Error: Не удалось найти файл с цветами ($COLORS_FILE)!"
  exit 1
fi

COLORS=$(cat "$COLORS_FILE")
BG_COLOR=$(echo "$COLORS" | jq -r '.special.background')
FG_COLOR=$(echo "$COLORS" | jq -r '.special.foreground')
COLOR1=$(echo "$COLORS" | jq -r '.colors.color1')
COLOR2=$(echo "$COLORS" | jq -r '.colors.color2')
COLOR3=$(echo "$COLORS" | jq -r '.colors.color3')
COLOR4=$(echo "$COLORS" | jq -r '.colors.color4')
COLOR5=$(echo "$COLORS" | jq -r '.colors.color5')
COLOR6=$(echo "$COLORS" | jq -r '.colors.color6')
COLOR7=$(echo "$COLORS" | jq -r '.colors.color7')
COLOR8=$(echo "$COLORS" | jq -r '.colors.color8')
COLOR9=$(echo "$COLORS" | jq -r '.colors.color9')
COLOR10=$(echo "$COLORS" | jq -r '.colors.color10')
COLOR11=$(echo "$COLORS" | jq -r '.colors.color11')
COLOR12=$(echo "$COLORS" | jq -r '.colors.color12')
COLOR13=$(echo "$COLORS" | jq -r '.colors.color13')
COLOR14=$(echo "$COLORS" | jq -r '.colors.color14')
COLOR15=$(echo "$COLORS" | jq -r '.colors.color15')

echo "Основные цвета:"
echo "BG: $BG_COLOR, FG: $FG_COLOR, Accent: $COLOR1"

# Создание временного файла цветов
TMP_COLORS_FILE="/tmp/current_colors"
cat <<EOL > "$TMP_COLORS_FILE"
BG_COLOR=$BG_COLOR
FG_COLOR=$FG_COLOR
COLOR1=$COLOR1
COLOR2=$COLOR2
COLOR3=$COLOR3
COLOR4=$COLOR4
COLOR5=$COLOR5
COLOR6=$COLOR6
COLOR7=$COLOR7
COLOR8=$COLOR8
COLOR9=$COLOR9
COLOR10=$COLOR10
COLOR11=$COLOR11
COLOR12=$COLOR12
COLOR13=$COLOR13
COLOR14=$COLOR14
COLOR15=$COLOR15
EOL

# Обновление файлов конфигурации
echo "Обновление конфигурационных файлов..."

DUNST_CONFIG="$HOME/.config/leftwm/themes/current/dunstrc.tmpl"
if [ -f "$DUNST_CONFIG" ]; then 
  sed -i \
    -e "s/    background = .*/    background = \"$BG_COLOR\"/" \
    -e "s/    foreground = .*/    foreground = \"$FG_COLOR\"/" \
    -e "s/    frame_color = .*/    frame_color = \"$COLOR1\"/" \
    "$DUNST_CONFIG"
  echo "Конфигурация dunst обновлена!"
else
  echo "Ошибка: Конфиг dunst не найден!"
fi

CAVA_CONFIG="$HOME/.config/cava/config"
if [ -f "$CAVA_CONFIG" ]; then
  sed -i \
    -e "s/gradient_color_1 = .*/gradient_color_1 = \'$COLOR1\'/" \
    -e "s/gradient_color_2 = .*/gradient_color_2 = \'$COLOR2\'/" \
    -e "s/gradient_color_3 = .*/gradient_color_3 = \'$COLOR3\'/" \
    -e "s/gradient_color_4 = .*/gradient_color_4 = \'$COLOR4\'/" \
    -e "s/gradient_color_5 = .*/gradient_color_5 = \'$COLOR5\'/" \
    -e "s/gradient_color_6 = .*/gradient_color_6 = \'$COLOR6\'/" \
    -e "s/gradient_color_7 = .*/gradient_color_7 = \'$COLOR7\'/" \
    -e "s/gradient_color_8 = .*/gradient_color_8 = \'$COLOR8\'/" \
    "$CAVA_CONFIG"
  echo "Конфигурация cava обновлена!"
else
  echo "Ошибка: Конфиг cava не найден!"
fi

# Обновление Lemonbar конфигурации
LEMONBAR_CONFIG="$HOME/lemon"
if [ -f "$LEMONBAR_CONFIG" ]; then
  sed -i \
    -e "s/bg_color=.*/bg_color=\"$BG_COLOR\"   # Фон панели (чёрный с 80% прозрачности)/g" \
    -e "s/fg_color=.*/fg_color=\"$FG_COLOR\"     # Основной цвет текста (белый)/g" \
    -e "s/highlight_color=.*/highlight_color=\"$COLOR1\" # Цвет выделения фона для активного рабочего пространства/g" \
    "$LEMONBAR_CONFIG"
  echo "Lemonbar конфигурация обновлена!"
else
  echo "Ошибка: Конфиг Lemonbar не найден!"
fi

# Перезагрузка сервисов
killall dunst
dunst -conf .config/leftwm/themes/current/dunstrc.tmpl &
# killall lemon
# ./lemon &
killall cava
cava &

killall polybar
polybar &

# killall picom
# picom --daemon --backend glx --vsync --config picom.conf &
# Запуск Rofi с новой конфигурацией
# rofi -theme "$ROFI_CONFIG" &

echo "Обновление завершено!"
